line 372:16 extraneous input 'try' expecting {'~', 'from', '{', '}', '(', 'for', 'function', '[', 'address', 'mapping', 'calldata', 'if', 'while', 'assembly', 'do', 'return', 'throw', 'emit', 'var', 'bool', 'string', 'byte', '++', '--', 'new', '+', '-', 'after', 'delete', '!', Int, Uint, Byte, Fixed, Ufixed, BooleanLiteral, DecimalNumber, HexNumber, HexLiteral, 'break', 'continue', Identifier, StringLiteral}
line 379:16 missing ';' at '{'
line 386:18 extraneous input 'catch' expecting {<EOF>, 'pragma', '~', 'import', 'from', '{', '}', 'contract', 'interface', 'library', '(', 'using', 'for', 'struct', 'constructor', 'modifier', 'function', 'event', 'enum', '[', 'address', 'mapping', 'calldata', 'if', 'else', 'while', 'assembly', 'do', 'return', 'throw', 'emit', 'var', 'bool', 'string', 'byte', '++', '--', 'new', '+', '-', 'after', 'delete', '!', Int, Uint, Byte, Fixed, Ufixed, BooleanLiteral, DecimalNumber, HexNumber, HexLiteral, 'break', 'continue', Identifier, StringLiteral}
line 412:24 extraneous input 'try' expecting {<EOF>, 'pragma', '~', 'import', 'from', '{', '}', 'contract', 'interface', 'library', '(', 'using', 'for', 'struct', 'constructor', 'modifier', 'function', 'event', 'enum', '[', 'address', 'mapping', 'calldata', 'if', 'else', 'while', 'assembly', 'do', 'return', 'throw', 'emit', 'var', 'bool', 'string', 'byte', '++', '--', 'new', '+', '-', 'after', 'delete', '!', Int, Uint, Byte, Fixed, Ufixed, BooleanLiteral, DecimalNumber, HexNumber, HexLiteral, 'break', 'continue', Identifier, StringLiteral}
line 419:24 missing ';' at '{'
line 421:26 extraneous input 'catch' expecting {<EOF>, 'pragma', '~', 'import', 'from', '{', '}', 'contract', 'interface', 'library', '(', 'using', 'for', 'struct', 'constructor', 'modifier', 'function', 'event', 'enum', '[', 'address', 'mapping', 'calldata', 'if', 'else', 'while', 'assembly', 'do', 'return', 'throw', 'emit', 'var', 'bool', 'string', 'byte', '++', '--', 'new', '+', '-', 'after', 'delete', '!', Int, Uint, Byte, Fixed, Ufixed, BooleanLiteral, DecimalNumber, HexNumber, HexLiteral, 'break', 'continue', Identifier, StringLiteral}
line 466:12 extraneous input 'try' expecting {<EOF>, 'pragma', '~', 'import', 'from', '{', '}', 'contract', 'interface', 'library', '(', 'using', 'for', 'struct', 'constructor', 'modifier', 'function', 'event', 'enum', '[', 'address', 'mapping', 'calldata', 'if', 'else', 'while', 'assembly', 'do', 'return', 'throw', 'emit', 'var', 'bool', 'string', 'byte', '++', '--', 'new', '+', '-', 'after', 'delete', '!', Int, Uint, Byte, Fixed, Ufixed, BooleanLiteral, DecimalNumber, HexNumber, HexLiteral, 'break', 'continue', Identifier, StringLiteral}
line 473:12 missing ';' at '{'
line 480:14 extraneous input 'catch' expecting {<EOF>, 'pragma', '~', 'import', 'from', '{', '}', 'contract', 'interface', 'library', '(', 'using', 'for', 'struct', 'constructor', 'modifier', 'function', 'event', 'enum', '[', 'address', 'mapping', 'calldata', 'if', 'else', 'while', 'assembly', 'do', 'return', 'throw', 'emit', 'var', 'bool', 'string', 'byte', '++', '--', 'new', '+', '-', 'after', 'delete', '!', Int, Uint, Byte, Fixed, Ufixed, BooleanLiteral, DecimalNumber, HexNumber, HexLiteral, 'break', 'continue', Identifier, StringLiteral}
line 505:20 extraneous input 'try' expecting {<EOF>, 'pragma', '~', 'import', 'from', '{', '}', 'contract', 'interface', 'library', '(', 'using', 'for', 'struct', 'constructor', 'modifier', 'function', 'event', 'enum', '[', 'address', 'mapping', 'calldata', 'if', 'else', 'while', 'assembly', 'do', 'return', 'throw', 'emit', 'var', 'bool', 'string', 'byte', '++', '--', 'new', '+', '-', 'after', 'delete', '!', Int, Uint, Byte, Fixed, Ufixed, BooleanLiteral, DecimalNumber, HexNumber, HexLiteral, 'break', 'continue', Identifier, StringLiteral}
line 512:20 missing ';' at '{'
line 514:22 extraneous input 'catch' expecting {<EOF>, 'pragma', '~', 'import', 'from', '{', '}', 'contract', 'interface', 'library', '(', 'using', 'for', 'struct', 'constructor', 'modifier', 'function', 'event', 'enum', '[', 'address', 'mapping', 'calldata', 'if', 'else', 'while', 'assembly', 'do', 'return', 'throw', 'emit', 'var', 'bool', 'string', 'byte', '++', '--', 'new', '+', '-', 'after', 'delete', '!', Int, Uint, Byte, Fixed, Ufixed, BooleanLiteral, DecimalNumber, HexNumber, HexLiteral, 'break', 'continue', Identifier, StringLiteral}
Traceback (most recent call last):
  File "/conkas/conkas.py", line 137, in <module>
    main()
  File "/conkas/conkas.py", line 88, in main
    contracts = compile_files([filename])
  File "/usr/local/lib/python3.8/dist-packages/solcx/main.py", line 120, in compile_files
    contracts = _parse_compiler_output(stdoutdata)
  File "/usr/local/lib/python3.8/dist-packages/solcx/main.py", line 62, in _parse_compiler_output
    data["abi"] = json.loads(data["abi"])
  File "/usr/lib/python3.8/json/__init__.py", line 341, in loads
    raise TypeError(f'the JSON object must be str, bytes or bytearray, '
TypeError: the JSON object must be str, bytes or bytearray, not list
